{"ast":null,"code":"var _jsxFileName = \"P:\\\\ZOOM\\\\frontend\\\\src\\\\pages\\\\VideoMeet.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { TextField, Button } from '@mui/material';\nimport \"../styles/VideoMeetComponent.css\";\nimport io from \"socket.io-client\";\n// import { connect } from 'mongoose';\n// import { connectToSocket } from '../../../backend/src/controller/socketManager';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst server_url = \"http://localhost:8000\";\nvar connections = {};\nconst peerConfigConnections = {\n  \"iceServers\": [{\n    \"urls\": \"stun:stun.l.google.com:19032\"\n  }]\n};\nexport default function VideoMeetComponent() {\n  _s();\n  var socketRef = useRef();\n  let socketIdRef = useRef();\n  let localVideoRef = useRef();\n  let [videoAvailable, setvideoAvailable] = useState(true);\n  let [audioAvailable, setaudioAvailable] = useState(true);\n  let [video, setVideo] = useState([]);\n  let [audio, setAudio] = useState();\n  let [screen, setScreen] = useState();\n  let [showModel, setModel] = useState();\n  let [screenAvailable, setScreenAvailable] = useState();\n  let [message, setMessage] = useState(\"\");\n  let [messages, setMessages] = useState([]);\n  let [newMessages, setNewMessages] = useState(0);\n  let [askForUserName, setAskforUserName] = useState(true);\n  let [username, setUserName] = useState(\"\");\n  const videoRef = useRef([]);\n  let [videos, setVideos] = useState([]);\n  const getPermissions = async () => {\n    try {\n      const videoPermission = await navigator.mediaDevices.getUserMedia({\n        video: true\n      });\n      if (videoPermission) {\n        setvideoAvailable(true);\n      } else {\n        setvideoAvailable(false);\n      }\n      const audioPermission = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      if (audioPermission) {\n        setaudioAvailable(true);\n      } else {\n        setaudioAvailable(false);\n      }\n      if (navigator.mediaDevices.getDisplayMedia) {\n        setScreenAvailable(true);\n      } else {\n        setScreenAvailable(false);\n      }\n      if (videoAvailable || audioAvailable) {\n        const userMediaStream = await navigator.mediaDevices.getUserMedia({\n          video: videoAvailable,\n          audio: audioAvailable\n        });\n        if (userMediaStream) {\n          window.localStream = userMediaStream;\n          if (localVideoRef.current) {\n            localVideoRef.current.srcObject = userMediaStream;\n          }\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  useEffect(() => {\n    getPermissions();\n  }, []);\n  let getUserMediaSuccess = stream => {};\n  let getUserMedia = () => {\n    if (video && videoAvailable || audio && audioAvailable) {\n      navigator.mediaDevices.getUserMedia({\n        video: video,\n        audio: audio\n      }).then(getUserMediaSuccess => {}).then(stream => {}).catch(err => {\n        console.log(err);\n      });\n    } else {\n      try {\n        let tracks = localVideoRef.current.srcObject.getTracks();\n        tracks.forEach(track => track.stop());\n      } catch (err) {\n        console.log(err);\n      }\n    }\n  };\n  useEffect(() => {\n    if (video !== undefined && audio !== undefined) {\n      getUserMedia();\n    }\n  }, [audio, video]);\n  let gotMessageFromServer = (fromId, message) => {};\n  let addMessages = () => {};\n  let connectToSocketServer = () => {\n    socketRef.current = io.connect(server_url, {\n      secure: false\n    });\n    socketRef.current.on('signal', gotMessageFromServer);\n    socketRef.current.on(\"connect\", () => {\n      socketRef.current.emit(\"join-call\", window.location.href);\n      socketRef.current = socketRef.current.id;\n      socketRef.current.on(\"chat-message\", addMessages);\n      socketRef.current.on(\"user-left\", id => {\n        setVideo(videos => videos.filter(video => video.socketId !== id));\n      });\n      socketRef.current.on(\"user-joined\", (id, clients) => {\n        clients.forEach(socketListId => {\n          connections[socketListId] = new RTCPeerConnection(peerConfigConnections);\n        });\n      });\n    });\n  };\n  let getMedia = () => {\n    setVideo(videoAvailable);\n    setAudio(audioAvailable);\n    connectToSocketServer();\n  };\n  let connect = () => {\n    setAskforUserName(false);\n    getMedia();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: askForUserName === true ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Enter into Lobby\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        id: \"outlined-basic\",\n        label: \"username\",\n        value: username,\n        onChange: e => setUserName(e.target.value),\n        variant: \"outlined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: connect,\n        variant: \"contained\",\n        children: \"Join Meeting\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"video\", {\n          ref: localVideoRef,\n          autoPlay: true,\n          muted: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 9\n  }, this);\n}\n_s(VideoMeetComponent, \"t/+9pJMGwrY8f4QfnktTWCmZv6k=\");\n_c = VideoMeetComponent;\nvar _c;\n$RefreshReg$(_c, \"VideoMeetComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","TextField","Button","io","jsxDEV","_jsxDEV","Fragment","_Fragment","server_url","connections","peerConfigConnections","VideoMeetComponent","_s","socketRef","socketIdRef","localVideoRef","videoAvailable","setvideoAvailable","audioAvailable","setaudioAvailable","video","setVideo","audio","setAudio","screen","setScreen","showModel","setModel","screenAvailable","setScreenAvailable","message","setMessage","messages","setMessages","newMessages","setNewMessages","askForUserName","setAskforUserName","username","setUserName","videoRef","videos","setVideos","getPermissions","videoPermission","navigator","mediaDevices","getUserMedia","audioPermission","getDisplayMedia","userMediaStream","window","localStream","current","srcObject","err","console","log","getUserMediaSuccess","stream","then","catch","tracks","getTracks","forEach","track","stop","undefined","gotMessageFromServer","fromId","addMessages","connectToSocketServer","connect","secure","on","emit","location","href","id","filter","socketId","clients","socketListId","RTCPeerConnection","getMedia","children","fileName","_jsxFileName","lineNumber","columnNumber","label","value","onChange","e","target","variant","onClick","ref","autoPlay","muted","_c","$RefreshReg$"],"sources":["P:/ZOOM/frontend/src/pages/VideoMeet.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\nimport { TextField , Button } from '@mui/material';\r\nimport \"../styles/VideoMeetComponent.css\"\r\nimport io from \"socket.io-client\"\r\n// import { connect } from 'mongoose';\r\n// import { connectToSocket } from '../../../backend/src/controller/socketManager';\r\nconst server_url=\"http://localhost:8000\"\r\nvar connections={};\r\nconst peerConfigConnections={\r\n    \"iceServers\":[\r\n        {\"urls\":\"stun:stun.l.google.com:19032\"}\r\n    ]\r\n}\r\nexport default function VideoMeetComponent() {\r\n    var socketRef=useRef();\r\n    let socketIdRef=useRef();\r\n    let localVideoRef=useRef()\r\n    let [videoAvailable , setvideoAvailable]=useState(true);\r\n    let [audioAvailable , setaudioAvailable]=useState(true);\r\n    let [video , setVideo]=useState([]);\r\n    let [audio , setAudio]=useState();\r\n    let [screen , setScreen]=useState();\r\n    let [showModel , setModel]=useState();\r\n    let [screenAvailable , setScreenAvailable]=useState();\r\n    let [message , setMessage]=useState(\"\");\r\n    let [messages , setMessages]=useState([]);\r\n    let [newMessages , setNewMessages]=useState(0);\r\n    let [askForUserName, setAskforUserName]=useState(true);\r\n    let [username , setUserName]=useState(\"\");\r\n    const videoRef = useRef([]);\r\n    let [videos , setVideos]=useState([])\r\n\r\n    const getPermissions = async()=>{\r\n        try{\r\n            const videoPermission=await navigator.mediaDevices.getUserMedia({video:true})\r\n            if(videoPermission){\r\n                setvideoAvailable(true)\r\n            }else{\r\n                setvideoAvailable(false)\r\n            }\r\n            const audioPermission=await navigator.mediaDevices.getUserMedia({audio:true})\r\n            if(audioPermission){\r\n                setaudioAvailable(true)\r\n            }else{\r\n                setaudioAvailable(false);\r\n            }\r\n            if(navigator.mediaDevices.getDisplayMedia){\r\n                setScreenAvailable(true)\r\n            }else{\r\n                setScreenAvailable(false);\r\n            }\r\n            if(videoAvailable || audioAvailable){\r\n                const userMediaStream=await navigator.mediaDevices.getUserMedia({video:videoAvailable , audio:audioAvailable})\r\n                if(userMediaStream){\r\n                    window.localStream =userMediaStream\r\n                    if(localVideoRef.current){\r\n                        localVideoRef.current.srcObject=userMediaStream\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n\r\n        }catch (err){\r\n            console.log(err);\r\n\r\n        }\r\n\r\n    }\r\nuseEffect(()=>{\r\n    getPermissions()\r\n},[])\r\nlet getUserMediaSuccess=(stream)=>{\r\n\r\n\r\n}\r\n\r\n\r\n\r\nlet getUserMedia=()=>{\r\n    if((video && videoAvailable) || (audio &&audioAvailable)){\r\n        navigator.mediaDevices.getUserMedia({video:video , audio:audio})\r\n        .then((getUserMediaSuccess)=>{})\r\n        .then((stream)=>{})\r\n        .catch((err)=>{console.log(err)});\r\n    }else{\r\n        try{\r\n            let tracks = localVideoRef.current.srcObject.getTracks();\r\n            tracks.forEach(track => track.stop()\r\n                \r\n            );\r\n        }catch (err){\r\n            console.log(err);\r\n\r\n        }\r\n    }\r\n}\r\nuseEffect(()=>{\r\n    if(video !== undefined && audio !== undefined ){\r\n        getUserMedia()\r\n    }\r\n},[audio,video])\r\nlet gotMessageFromServer=(fromId , message)=>{\r\n\r\n}\r\nlet addMessages=()=>{\r\n\r\n}\r\n  let connectToSocketServer = () => {\r\n        socketRef.current = io.connect(server_url, { secure: false })\r\n        socketRef.current.on('signal', gotMessageFromServer);\r\n        socketRef.current.on(\"connect\",()=>{\r\n            socketRef.current.emit(\"join-call\",window.location.href)\r\n            socketRef.current=socketRef.current.id \r\n            socketRef.current.on(\"chat-message\",addMessages);\r\n            socketRef.current.on(\"user-left\",(id)=>{\r\n                setVideo((videos)=>videos.filter((video)=>video.socketId!==id))\r\n            })\r\n            socketRef.current.on(\"user-joined\",(id , clients)=>{\r\n                clients.forEach((socketListId)=>{\r\n                    connections[socketListId]=new RTCPeerConnection(peerConfigConnections)\r\n                })\r\n            })\r\n        })\r\n  }\r\n \r\nlet getMedia=()=>{\r\n    setVideo(videoAvailable);\r\n    setAudio(audioAvailable);\r\n    connectToSocketServer();\r\n}\r\nlet connect = () => {\r\n        setAskforUserName(false);\r\n        getMedia();\r\n    }\r\n\r\n\r\n\r\n    return ( \r\n        \r\n        <div>\r\n            {askForUserName===true?\r\n            <div>\r\n                <h2>Enter into Lobby</h2>\r\n                <TextField id=\"outlined-basic\" label=\"username\" value={username} onChange={e => setUserName(e.target.value)}  variant=\"outlined\" />\r\n                <Button onClick={connect} variant=\"contained\">Join Meeting</Button>\r\n                <div>\r\n                    <video  ref={localVideoRef} autoPlay muted ></video>\r\n                    </div>\r\n                </div>:<></>\r\n            }\r\n\r\n        </div>\r\n        \r\n     );\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}